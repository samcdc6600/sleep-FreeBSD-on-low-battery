#!/bin/sh


################################################################################
################################################################################
###									     ###
###	Program Name:			Sleep On Low Power		     ###
###	File:				solp				     ###
###	Author:				Samual G Brown			     ###
###	Date of Creation:		31/10/2020			     ###
###	Late Modified:			31/10/2020			     ###
###	Purpos:				To warn the user when the machines   ###
###					batter level is below some certain   ###
###					percentage and to put the machine    ###
###					to sleep if the machines batter      ###
###					level is below some certain	     ###
###					percentage independent of the	     ###
###					previously mentioned percentage.     ###
###	Description of prog operation:  Execution starts in main. A check    ###
###					is made to see If we are currently   ###
###     charging. If we are not then a check check is done to see if the     ###
###	battery is equal to or below the sleep threshold and also if the     ###
###	sleep dialogue has already been displayed. If this check passes then ###
###     alarm sound one and two are played, a sleep countdown dialogue opens ###
###     and a script to lock and put the computer to sleep is run after the  ###
###     dialogue completes (unless the charging status has changed to	     ###
###     charging.) If the battery is not equal to or below the sleep   	     ###
###     threshold then a check is made to see if it is equal to or below the ###
###     warning threshold and also if the warning dialogue has already been  ###
###     displayed. If this check passes then alarm sound one is played and a ###
###	warning dialogue is displayed to tell the user that the battery is   ###
###	getting low. Finally at the end of main the setDialogueDisplayed     ###
###     function is run for the sleep threshold dialogue and then again for  ###
###     the warning threshold. The setDialogueDisplayed function creates a   ###
###	file if it's second argument is less then or equal to 		     ###
###     $BATTERY_LEVEL, the file $1 doesn't already  exist and the machine   ###
###     is not charging. If it's second argument is above $BATTERY_LEVEL,    ###
###     the file does exist and it is charging then it will delete it. This  ###
###     program is intened to be run as a cron job and through the file	     ###
###     creation and deletion mechanism just descriped it will know not to   ###
###     show a dialogue box if it has already done so.			     ###
###									     ###
################################################################################
################################################################################


################################# Program paths ################################
################################################################################
SYSCTL_PROG="/sbin/sysctl"
ZENITY_PROG="/usr/local/bin/zenity"
ECHO_PROG="/bin/echo"
BC_PROG="/usr/bin/bc"
SLEEP_PROG="/bin/sleep"
TOUCH_PROG="/usr/bin/touch"
RM_PROG="/bin/rm"
MPV_PROG="/usr/local/bin/mpv"


################################### Constants ##################################
################################################################################
TRUE="1"
FALSE="0"
WARNING_THRESHOLD="12"
SLEEP_THRESHOLD="7"
CURRENT_CHARGING_STATUS=`${SYSCTL_PROG} -n hw.acpi.acline`
CARGING_OFF="0"			# 1 if machine is charging 0 if not.
BATTERY_LEVEL=`${SYSCTL_PROG} -n hw.acpi.battery.life`


dialogueDisplayed()
{	# The following arguments should be passed
    # "dialogue displayed info dir", where dialogue displayed info dir is the
    # directory of the sentinal file that will indicate wheather or not a
    # dialogue box should possibly be displayed.
    if [ -f "${1}" ]
    then
	RET=$TRUE
    else
	RET=$FALSE
    fi
    $ECHO_PROG $RET
}


playSound()
{
    $MPV_PROG --volume=90 -audio-display=no --profile=low-latency ${1} > \
	      /dev/null &
}


cowntdown()
{	# The following arguments should be passed "sleep interval",
    # "sleep message" and "window title" their order should be as seen here.
    # Where sleep interval is the time spent sleeping between status bar updates
    # (for example if sleep interval was 0.6 then the status bar would take one
    # minute to complete as 0.6*100 = 60).
    local STATUS_BAR_MIN="0"
    local STATUS_BAR_MAX="100"
    
    (for iter in $(seq $STATUS_BAR_MIN $STATUS_BAR_MAX)
     do
	 local timeLeft=`$ECHO_PROG "( ${STATUS_BAR_MAX} - ${iter} ) * \
${1}" | $BC_PROG`;

	 # Check charging status and return if charging.
	 if [ `${SYSCTL_PROG} -n hw.acpi.acline` -ne $CARGING_OFF ]
	 then			# We are now charging
	     break
	 fi
	 
	 $ECHO_PROG "${2}${timeLeft}s"
	 $ECHO_PROG "${iter}"
	 $SLEEP_PROG "${1}"
     done) | zenity --progress --title "${3}" --auto-close --no-cancel

    # Reset CURRENT_CHARGING_STATUS as it may have changed. This should be
    # checked for after this function is run.
    CURRENT_CHARGING_STATUS=`${SYSCTL_PROG} -n hw.acpi.acline`
}


zzzSleep()
{	# Lock the computer and put it to sleep.
    ${HOME}/.config/i3/configdir/lock.sh
}


displayWarningMessage()
{	# The following arguments should be passed "window title" and
    # "warning message"
    $ZENITY_PROG --warning --title "${1}" --width 300 --text \
		 "${2}"
}


setDialogueDisplayed()
{	# The following arguments should be passed
    # "dialogue displayed info dir" and "dialogue threshold", where dialogue
    # displayed info dir is the directory of the sentinal file that will
    # indicate wheather or not a dialogue box should possibly be displayed, and
    # dialogue threshold is the battery level at which the dialouge should be
    # displayed.
    if [ $BATTERY_LEVEL -le $2 ]
    then			# If the battery level is less than.
	if [ \( ! -f "${1}" \) -a \( $CURRENT_CHARGING_STATUS -eq $CARGING_OFF \) ]
	then			# If the file doesn't exist and we are not
	    $TOUCH_PROG $1
	fi
    else			# If the battery level is greater than.
	if [ \( -f "${1}" \) -a \( $CURRENT_CHARGING_STATUS -ne $CARGING_OFF \) ]
	then			# If it exists and we are charging remove it.
	    $RM_PROG $1
	fi
    fi
}


main()
{   
    local SLEEP_DIALOGUE_DISPLAYED_INFO_DIR="/tmp/sleepDialogueDisplayed"
    local WARNING_DIALOGUE_DISPLAYED_INFO_DIR="/tmp/sleepWarningDialogueDisplay\
ed"
    
    if [ $CURRENT_CHARGING_STATUS -eq $CARGING_OFF ]
    then			# We are on battery power.
	# UI alert sound dirs (one is light harted and two is ominous!).
	local ALERT_SOUND_ONE="${HOME}/.uiSoundResources/541560__sieuamthanh__c\
huong-6e.wav"
	local ALERT_SOUND_TWO="${HOME}/.uiSoundResources/541605__erokia__msfxp9\
-49-one-shot.wav"
	
	if [ \( $BATTERY_LEVEL -le $SLEEP_THRESHOLD \) -a \( `dialogueDisplayed "${SLEEP_DIALOGUE_DISPLAYED_INFO_DIR}"` -eq $FALSE \) ]
	then			# The battery level is below $SLEEP_THRESHOLD.
	    local SLEEP_INTERVAL="0.6"
	    local SLEEP_MESSAGE="# Battery at or below (${BATTERY_LEVEL}%). \
Computer will sleep in "
	    local WINDOW_TITLE="WARNING LOW BATTERY (${BATTERY_LEVEL}%)"

	    playSound "${ALERT_SOUND_ONE}"
	    playSound "${ALERT_SOUND_TWO}"
	    cowntdown "${SLEEP_INTERVAL}" "${SLEEP_MESSAGE}" "${WINDOW_TITLE}"
	    if [ $CURRENT_CHARGING_STATUS -eq $CARGING_OFF ]
	    then		# We are still not charging.
		zzzSleep
	    fi
	else
	    if [ \( $BATTERY_LEVEL -le $WARNING_THRESHOLD \) -a \( `dialogueDisplayed "${WARNING_DIALOGUE_DISPLAYED_INFO_DIR}"` -eq $FALSE \) ]
	    then		# The battery level is above $SLEEP_THRESHOLD
		# but below $WARNING_THRESHOLD.
		local WINDOW_TITLE="Warning Low Battery (${BATTERY_LEVEL}%)"
		local WARNING_MESSAGE="It has been detected that your machines \
batterry level is ${BATTERY_LEVEL}% which is at or below ${WARNING_THRESHOLD}%!\
 The machine will automatically be put to sleep when it is detected that the \
battery level is at or below ${SLEEP_THRESHOLD}%!"


		playSound "${ALERT_SOUND_ONE}"
	    	displayWarningMessage "${WINDOW_TITLE}" "${WARNING_MESSAGE}"
	    fi
	fi
    fi

    # Recorde whether or to dialogues have already been displayed since entering
    # the relevant battery percentages.
    setDialogueDisplayed $SLEEP_DIALOGUE_DISPLAYED_INFO_DIR $SLEEP_THRESHOLD
    setDialogueDisplayed $WARNING_DIALOGUE_DISPLAYED_INFO_DIR $WARNING_THRESHOLD
}


main
